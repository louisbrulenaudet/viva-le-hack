[project]
name = "application"
package = false
version = "0.1.0"
description = "Viva Le Hack OpenAI Hackathon 2025"
license = {text = "Apache-2.0"}
readme = "README.md"
keywords = ["biology", "chemistry", "openai", "llm", "deep learning", "data analysis", "image-processing", "text-processing", "information-retrieval", "image-analysis", "data-science", "data-engineering", "data-visualization", "data-mining", "data-cleaning", "data-preprocessing", "data-wrangling", "data-integration", "data-transformation", "data-modeling", "data-analytics", "data-pipelines", "image-generation", "agentic-ai", "llm-agents", "llm-automation", "llm-analytics", "llm-data-processing", "llm-data-analysis", "llm-data-engineering", "llm-data-science", "llm-data-mining", "llm-data-cleaning", "llm-data-preprocessing", "llm-data-wrangling", "llm-data-integration", "llm-data-transformation", "llm-data-modeling", "llm-data-visualization"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science and Research",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Science",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Deep Learning",
    "Topic :: Text Processing :: General"
]

requires-python = ">=3.12"
dependencies = [
    "aiocache>=0.12.3",
    "dramatiq[redis,watch]>=1.17.1",
    "fastapi[standard]>=0.115.7",
    "httpx>=0.28.1",
    "pydantic>=2.10.6",
    "pydantic-settings>=2.7.1",
    "Jinja2>=3.1.6",
    "logfire>=3.14.1",
    "cloudflare>=4.1.0",
    "validators>=0.35.0",
    "boto3>=1.38.19",
    "mcp>=1.9.3",
    "openai>=1.79.0",
    "resend>=2.10.0",
    "opencv-python>=4.11.0.86",
    "pillow>=11.2.1",
    "gradio[mcp]>=5.33.0",
]

[project.optional-dependencies]
dev = [
    "pre-commit>=4.1.0",
    "pre-commit-uv>=4.1.4",
    "pytest>=8.3.4",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "ruff>=0.9.3",
]

[tool.pytest.ini_options]
pythonpath = ["."]
addopts = "--maxfail=1 --disable-warnings -q --cov=app --cov-report=term-missing"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff.lint]
select = [
    # pycodestyle
    "E",
    "W",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # flake8-bugbear
    "B",
    # flake8-simplify
    "SIM",
    # isort
    "I",
    # flake8-annotations
    "ANN",
    # flake8-print
    "T20",
]
ignore = [
    "B008",
    "E501",
]

[tool.ruff.lint.per-file-ignores]
"**/{tests,docs}/*" = [
    "ANN",
    "E402",
]

[tool.logfire]
pydantic_plugin_record = "all"

[tool.ruff]
fix = true

[tool.pyright]
exclude = [
    "**/tests"
]

[tool.ruff.format]
quote-style = "double"
line-ending = "auto"

[tool.ruff.lint.pyupgrade]
keep-runtime-typing = true

[tool.coverage.run]
branch = true
source = ["app"]

[dependency-groups]
dev = [
    "ty>=0.0.1a6",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
ignore_errors = true
